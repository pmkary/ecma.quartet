{"workspaceXML":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"compose\" id=\"@+lCHnZq?WGVpom@ycC[\" deletable=\"false\" x=\"40\" y=\"40\"><statement name=\"children\"><block type=\"comment\" id=\"HAoGBAHN!}y?99!!de3_\"><field name=\"comment\">This Quartet finds RegExes</field><next><block type=\"encode\" id=\"oU6ddY[%_|Qg!,_?=K;f\"><field name=\"text\">/</field><next><block type=\"one_or_more\" id=\"|,`Nu!V3^6=Rx9C@i)I^\"><statement name=\"regex\"><block type=\"one_of\" id=\"`rS]akC;ZvwKDC%^}ow+\"><statement name=\"Items\"><block type=\"option\" id=\"!0)/OT!lX_?28]a[yyXd\"><statement name=\"NAME\"><block type=\"encode\" id=\"(k?zplaAAWNiDW]2oQA#\"><field name=\"text\">\\/</field></block></statement><next><block type=\"option\" id=\"B8x_9LM3T0Qi+D{X(d+h\"><statement name=\"NAME\"><block type=\"anything_but\" id=\"~qq62pt[kV=[5MDhIku8\"><field name=\"numbers\">FALSE</field><field name=\"lowercase\">FALSE</field><field name=\"uppercase\">FALSE</field><field name=\"other\">/</field></block></statement></block></next></block></statement></block></statement><next><block type=\"encode\" id=\"D#r|/onYK`g_mu[;^+26\"><field name=\"text\">/</field><next><block type=\"comment\" id=\"IuQSmUJ4^^Z1F;P2En16\"><field name=\"comment\">Flags</field><next><block type=\"any_number_of\" id=\"H`9-vOcFV-Cqt[OkOjvS\"><statement name=\"regex\"><block type=\"alphabet\" id=\"8VX2z~j-l~Ob~}ASUB?%\"><field name=\"numbers\">FALSE</field><field name=\"lowercase\">FALSE</field><field name=\"uppercase\">FALSE</field><field name=\"other\">igm</field></block></statement></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>","playgroundText":"\n//\n// Copyright 2016 Kary Foundation, Inc.\n//   Author: Pouya Kary <k@karyfoundation.org>\n//\n// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/.\n//\n\n//\n// ─── CONSTANTS ──────────────────────────────────────────────────────────────────\n//\n\n    // ../../quartets/regex-sequence.quartet\n    const sequenceRegEx = /^(?:\\(.*\\)|\\[.*\\])$/;\n\n    // ../../quartets/quartet-html-entities.quartet\n    const htmlSpecialEntities = /&(?:nbsp|#160|gt|lt);/g;\n\n    // ../../quartets/html-entities.quartet\n    const selectedBlockHTMl = /\\<span class\\=\"console\\-highlight\\-active\\-block\"\\>(.*)\\<\\/span\\>/g;\n\n//\n// ─── TO UNICODE ─────────────────────────────────────────────────────────────────\n//\n\n    function quartetUnicodify ( text ) {\n        let result = [ ];\n        for ( let character of text ) {\n            result.push( getUnicodeCharacter( character ) );\n        }\n        return result.join('');\n    }\n\n//\n// ─── GET REGEX FROM HTML ────────────────────────────────────────────────────────\n//\n\n    function quartetGetWildcardFromQuartetEncodedHTML ( code ) {\n        return code.replace( selectedBlockHTMl  , ( val, matchOne ) => matchOne )\n                   .replace( /&nbsp;/g          , ' '                           )\n                   .replace( /&gt;/g            , '>'                           )\n                   .replace( /&lt;/g            , '<'                           );\n    }\n\n//\n// ─── GET UNICODE CHARACTER ──────────────────────────────────────────────────────\n//\n\n    function getUnicodeCharacter ( character ) {\n        let num = character.charCodeAt( 0 ).toString( 16 ).toUpperCase( );\n        let size = 4 - num.length;\n        for ( let index = 0; index < size; index++ ) num = '0' + num;\n        return '\\\\u' + num;\n    }\n\n//\n// ─── SEQUENCE MAKER ─────────────────────────────────────────────────────────────\n//\n\n    function quartetSequence ( code ) {\n        if ( sequenceRegEx.test( code ) ) return code;\n        return ( quartetGetStringLength( code ) <= 1 )? code : '(?:' + code + ')';\n    }\n\n//\n// ─── ENCODE TEXT ────────────────────────────────────────────────────────────────\n//\n\n    function quartetEncodeText ( code ) {\n        let result = [ ];\n        for ( let character of code ) {\n            switch ( character ) {\n                case '.':\n                case '\\\\':\n                case '+':\n                case '*':\n                case '?':\n                case '[':\n                case '^':\n                case ']':\n                case '$':\n                case '(':\n                case ')':\n                case '{':\n                case '}':\n                case '=':\n                case '!':\n                case '<':\n                case '>':\n                case '|':\n                case ':':\n                case '-':\n                case '/':\n                    result.push( `\\\\${ character }` );\n                    break;\n                case ' ':\n                    result.push( '&nbsp;');\n                    break;\n                default:\n                    result.push( character );\n            }\n        }\n        return quartetEncodeHTML( result.join('') );\n    }\n\n//\n// ─── SPACE ENCODE ───────────────────────────────────────────────────────────────\n//\n\n    function quartetSpaceEncode ( text ) {\n        return text.replace(/ /g, '&nbsp;');\n    }\n\n//\n// ─── GET STRING LENGTH ──────────────────────────────────────────────────────────\n//\n\n    function quartetGetStringLength ( code ) {\n        return code.replace( htmlSpecialEntities, ' ' ).length;\n    }\n\n//\n// ─── SPACE DECODE ───────────────────────────────────────────────────────────────\n//\n\n    function quartetSpaceDecode ( text ) {\n        return text.replace( /\\\\u0020/g, ' ' );\n    }\n\n//\n// ─── MAKE ALPHABET ──────────────────────────────────────────────────────────────\n//\n\n    function quartetAlphabet ( sigma ) {\n        if ( sigma.length === 0 ) return '';\n        return quartetEncodeHTML( ( sigma.length === 1 )? sigma[ 0 ] : '[' + sigma.join('') + ']' );\n    }\n\n//\n// ─── ENCODE FOR HTML ────────────────────────────────────────────────────────────\n//\n\n    function quartetEncodeHTML ( text ) {\n        return text.replace( /<|>/, match => {\n            switch ( match ) {\n                case '<':\n                    return '&lt;';\n                case '>':\n                    return '&gt;';\n            }\n        });\n    }\n\n// ────────────────────────────────────────────────────────────────────────────────\n\n//\n// Copyright 2016 Kary Foundation, Inc.\n//   Author: Pouya Kary <k@karyfoundation.org>\n//\n// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/.\n//\n\n//\n// ─── CONSTANTS ──────────────────────────────────────────────────────────────────\n//\n\n    // ../../quartets/regex-sequence.quartet\n    const sequenceRegEx = /^(?:\\(.*\\)|\\[.*\\])$/;\n\n    // ../../quartets/quartet-html-entities.quartet\n    const htmlSpecialEntities = /&(?:nbsp|#160|gt|lt);/g;\n\n    // ../../quartets/html-entities.quartet\n    const selectedBlockHTMl = /\\<span class\\=\"console\\-highlight\\-active\\-block\"\\>(.*)\\<\\/span\\>/g;\n\n//\n// ─── TO UNICODE ─────────────────────────────────────────────────────────────────\n//\n\n    function quartetUnicodify ( text ) {\n        let result = [ ];\n        for ( let character of text ) {\n            result.push( getUnicodeCharacter( character ) );\n        }\n        return result.join('');\n    }\n\n//\n// ─── GET REGEX FROM HTML ────────────────────────────────────────────────────────\n//\n\n    function quartetGetWildcardFromQuartetEncodedHTML ( code ) {\n        return code.replace( selectedBlockHTMl  , ( val, matchOne ) => matchOne )\n                   .replace( /&nbsp;/g          , ' '                           )\n                   .replace( /&gt;/g            , '>'                           )\n                   .replace( /&lt;/g            , '<'                           );\n    }\n\n//\n// ─── GET UNICODE CHARACTER ──────────────────────────────────────────────────────\n//\n\n    function getUnicodeCharacter ( character ) {\n        let num = character.charCodeAt( 0 ).toString( 16 ).toUpperCase( );\n        let size = 4 - num.length;\n        for ( let index = 0; index < size; index++ ) num = '0' + num;\n        return '\\\\u' + num;\n    }\n\n//\n// ─── SEQUENCE MAKER ─────────────────────────────────────────────────────────────\n//\n\n    function quartetSequence ( code ) {\n        if ( sequenceRegEx.test( code ) ) return code;\n        return ( quartetGetStringLength( code ) <= 1 )? code : '(?:' + code + ')';\n    }\n\n//\n// ─── ENCODE TEXT ────────────────────────────────────────────────────────────────\n//\n\n    function quartetEncodeText ( code ) {\n        let result = [ ];\n        for ( let character of code ) {\n            switch ( character ) {\n                case '.':\n                case '\\\\':\n                case '+':\n                case '*':\n                case '?':\n                case '[':\n                case '^':\n                case ']':\n                case '$':\n                case '(':\n                case ')':\n                case '{':\n                case '}':\n                case '=':\n                case '!':\n                case '<':\n                case '>':\n                case '|':\n                case ':':\n                case '-':\n                case '/':\n                    result.push( `\\\\${ character }` );\n                    break;\n                case ' ':\n                    result.push( '&nbsp;');\n                    break;\n                default:\n                    result.push( character );\n            }\n        }\n        return quartetEncodeHTML( result.join('') );\n    }\n\n//\n// ─── SPACE ENCODE ───────────────────────────────────────────────────────────────\n//\n\n    function quartetSpaceEncode ( text ) {\n        return text.replace(/ /g, '&nbsp;');\n    }\n\n//\n// ─── GET STRING LENGTH ──────────────────────────────────────────────────────────\n//\n\n    function quartetGetStringLength ( code ) {\n        return code.replace( htmlSpecialEntities, ' ' ).length;\n    }\n\n//\n// ─── SPACE DECODE ───────────────────────────────────────────────────────────────\n//\n\n    function quartetSpaceDecode ( text ) {\n        return text.replace( /\\\\u0020/g, ' ' );\n    }\n\n//\n// ─── MAKE ALPHABET ──────────────────────────────────────────────────────────────\n//\n\n    function quartetAlphabet ( sigma ) {\n        if ( sigma.length === 0 ) return '';\n        return quartetEncodeHTML( ( sigma.length === 1 )? sigma[ 0 ] : '[' + sigma.join('') + ']' );\n    }\n\n//\n// ─── ENCODE FOR HTML ────────────────────────────────────────────────────────────\n//\n\n    function quartetEncodeHTML ( text ) {\n        return text.replace( /<|>/, match => {\n            switch ( match ) {\n                case '<':\n                    return '&lt;';\n                case '>':\n                    return '&gt;';\n            }\n        });\n    }\n\n// ────────────────────────────────────────────────────────────────────────────────\n\n//\n// Copyright 2016 Kary Foundation, Inc.\n//   Author: Pouya Kary <k@karyfoundation.org>\n//\n// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/.\n//\n\n//\n// ─── CONSTANTS ──────────────────────────────────────────────────────────────────\n//\n\n    // ../../quartets/regex-sequence.quartet\n    const sequenceRegEx = /^(?:\\(.*\\)|\\[.*\\])$/;\n\n    // ../../quartets/quartet-html-entities.quartet\n    const htmlSpecialEntities = /&(?:nbsp|#160|gt|lt);/g;\n\n    // ../../quartets/html-entities.quartet\n    const selectedBlockHTMl = /\\<span class\\=\"console\\-highlight\\-active\\-block\"\\>(.*)\\<\\/span\\>/g;\n\n//\n// ─── TO UNICODE ─────────────────────────────────────────────────────────────────\n//\n\n    function quartetUnicodify ( text ) {\n        let result = [ ];\n        for ( let character of text ) {\n            result.push( getUnicodeCharacter( character ) );\n        }\n        return result.join('');\n    }\n\n//\n// ─── GET REGEX FROM HTML ────────────────────────────────────────────────────────\n//\n\n    function quartetGetWildcardFromQuartetEncodedHTML ( code ) {\n        return code.replace( selectedBlockHTMl  , ( val, matchOne ) => matchOne )\n                   .replace( /&nbsp;/g          , ' '                           )\n                   .replace( /&gt;/g            , '>'                           )\n                   .replace( /&lt;/g            , '<'                           );\n    }\n\n//\n// ─── GET UNICODE CHARACTER ──────────────────────────────────────────────────────\n//\n\n    function getUnicodeCharacter ( character ) {\n        let num = character.charCodeAt( 0 ).toString( 16 ).toUpperCase( );\n        let size = 4 - num.length;\n        for ( let index = 0; index < size; index++ ) num = '0' + num;\n        return '\\\\u' + num;\n    }\n\n//\n// ─── SEQUENCE MAKER ─────────────────────────────────────────────────────────────\n//\n\n    function quartetSequence ( code ) {\n        if ( sequenceRegEx.test( code ) ) return code;\n        return ( quartetGetStringLength( code ) <= 1 )? code : '(?:' + code + ')';\n    }\n\n//\n// ─── ENCODE TEXT ────────────────────────────────────────────────────────────────\n//\n\n    function quartetEncodeText ( code ) {\n        let result = [ ];\n        for ( let character of code ) {\n            switch ( character ) {\n                case '.':\n                case '\\\\':\n                case '+':\n                case '*':\n                case '?':\n                case '[':\n                case '^':\n                case ']':\n                case '$':\n                case '(':\n                case ')':\n                case '{':\n                case '}':\n                case '=':\n                case '!':\n                case '<':\n                case '>':\n                case '|':\n                case ':':\n                case '-':\n                case '/':\n                    result.push( `\\\\${ character }` );\n                    break;\n                case ' ':\n                    result.push( '&nbsp;');\n                    break;\n                default:\n                    result.push( character );\n            }\n        }\n        return quartetEncodeHTML( result.join('') );\n    }\n\n//\n// ─── SPACE ENCODE ───────────────────────────────────────────────────────────────\n//\n\n    function quartetSpaceEncode ( text ) {\n        return text.replace(/ /g, '&nbsp;');\n    }\n\n//\n// ─── GET STRING LENGTH ──────────────────────────────────────────────────────────\n//\n\n    function quartetGetStringLength ( code ) {\n        return code.replace( htmlSpecialEntities, ' ' ).length;\n    }\n\n//\n// ─── SPACE DECODE ───────────────────────────────────────────────────────────────\n//\n\n    function quartetSpaceDecode ( text ) {\n        return text.replace( /\\\\u0020/g, ' ' );\n    }\n\n//\n// ─── MAKE ALPHABET ──────────────────────────────────────────────────────────────\n//\n\n    function quartetAlphabet ( sigma ) {\n        if ( sigma.length === 0 ) return '';\n        return quartetEncodeHTML( ( sigma.length === 1 )? sigma[ 0 ] : '[' + sigma.join('') + ']' );\n    }\n\n//\n// ─── ENCODE FOR HTML ────────────────────────────────────────────────────────────\n//\n\n    function quartetEncodeHTML ( text ) {\n        return text.replace( /<|>/, match => {\n            switch ( match ) {\n                case '<':\n                    return '&lt;';\n                case '>':\n                    return '&gt;';\n            }\n        });\n    }\n\n// ────────────────────────────────────────────────────────────────────────────────\n\n//\n// Copyright 2016 Kary Foundation, Inc.\n//   Author: Pouya Kary <k@karyfoundation.org>\n//\n// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/.\n//\n\n//\n// ─── CONSTANTS ──────────────────────────────────────────────────────────────────\n//\n\n    // ../../quartets/regex-sequence.quartet\n    const sequenceRegEx = /^(?:\\(.*\\)|\\[.*\\])$/;\n\n    // ../../quartets/quartet-html-entities.quartet\n    const htmlSpecialEntities = /&(?:nbsp|#160|gt|lt);/g;\n\n    // ../../quartets/html-entities.quartet\n    const selectedBlockHTMl = /\\<span class\\=\"console\\-highlight\\-active\\-block\"\\>(.*)\\<\\/span\\>/g;\n\n//\n// ─── TO UNICODE ─────────────────────────────────────────────────────────────────\n//\n\n    function quartetUnicodify ( text ) {\n        let result = [ ];\n        for ( let character of text ) {\n            result.push( getUnicodeCharacter( character ) );\n        }\n        return result.join('');\n    }\n\n//\n// ─── GET REGEX FROM HTML ────────────────────────────────────────────────────────\n//\n\n    function quartetGetWildcardFromQuartetEncodedHTML ( code ) {\n        return code.replace( selectedBlockHTMl  , ( val, matchOne ) => matchOne )\n                   .replace( /&nbsp;/g          , ' '                           )\n                   .replace( /&gt;/g            , '>'                           )\n                   .replace( /&lt;/g            , '<'                           );\n    }\n\n//\n// ─── GET UNICODE CHARACTER ──────────────────────────────────────────────────────\n//\n\n    function getUnicodeCharacter ( character ) {\n        let num = character.charCodeAt( 0 ).toString( 16 ).toUpperCase( );\n        let size = 4 - num.length;\n        for ( let index = 0; index < size; index++ ) num = '0' + num;\n        return '\\\\u' + num;\n    }\n\n//\n// ─── SEQUENCE MAKER ─────────────────────────────────────────────────────────────\n//\n\n    function quartetSequence ( code ) {\n        if ( sequenceRegEx.test( code ) ) return code;\n        return ( quartetGetStringLength( code ) <= 1 )? code : '(?:' + code + ')';\n    }\n\n//\n// ─── ENCODE TEXT ────────────────────────────────────────────────────────────────\n//\n\n    function quartetEncodeText ( code ) {\n        let result = [ ];\n        for ( let character of code ) {\n            switch ( character ) {\n                case '.':\n                case '\\\\':\n                case '+':\n                case '*':\n                case '?':\n                case '[':\n                case '^':\n                case ']':\n                case '$':\n                case '(':\n                case ')':\n                case '{':\n                case '}':\n                case '=':\n                case '!':\n                case '<':\n                case '>':\n                case '|':\n                case ':':\n                case '-':\n                case '/':\n                    result.push( `\\\\${ character }` );\n                    break;\n                case ' ':\n                    result.push( '&nbsp;');\n                    break;\n                default:\n                    result.push( character );\n            }\n        }\n        return quartetEncodeHTML( result.join('') );\n    }\n\n//\n// ─── SPACE ENCODE ───────────────────────────────────────────────────────────────\n//\n\n    function quartetSpaceEncode ( text ) {\n        return text.replace(/ /g, '&nbsp;');\n    }\n\n//\n// ─── GET STRING LENGTH ──────────────────────────────────────────────────────────\n//\n\n    function quartetGetStringLength ( code ) {\n        return code.replace( htmlSpecialEntities, ' ' ).length;\n    }\n\n//\n// ─── SPACE DECODE ───────────────────────────────────────────────────────────────\n//\n\n    function quartetSpaceDecode ( text ) {\n        return text.replace( /\\\\u0020/g, ' ' );\n    }\n\n//\n// ─── MAKE ALPHABET ──────────────────────────────────────────────────────────────\n//\n\n    function quartetAlphabet ( sigma ) {\n        if ( sigma.length === 0 ) return '';\n        return quartetEncodeHTML( ( sigma.length === 1 )? sigma[ 0 ] : '[' + sigma.join('') + ']' );\n    }\n\n//\n// ─── ENCODE FOR HTML ────────────────────────────────────────────────────────────\n//\n\n    function quartetEncodeHTML ( text ) {\n        return text.replace( /<|>/, match => {\n            switch ( match ) {\n                case '<':\n                    return '&lt;';\n                case '>':\n                    return '&gt;';\n            }\n        });\n    }\n\n// ────────────────────────────────────────────────────────────────────────────────\n"}